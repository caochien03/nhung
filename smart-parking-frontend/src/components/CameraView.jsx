import React, {
    useRef,
    useEffect,
    useState,
    forwardRef,
    useImperativeHandle,
} from "react";

const CameraView = forwardRef(function CameraView(
    { title, cameraIndex = 0, onPlateDetected },
    ref
) {
    const videoRef = useRef(null);
    const canvasRef = useRef(null);
    const [licensePlate, setLicensePlate] = useState("[Bi·ªÉn s·ªë]");
    const [isLoading, setIsLoading] = useState(false);
    const [cameras, setCameras] = useState([]);
    const [selectedCamera, setSelectedCamera] = useState(null);
    const [error, setError] = useState("");

    // Li·ªát k√™ t·∫•t c·∫£ camera
    useEffect(() => {
        const listCameras = async () => {
            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(
                    (device) => device.kind === "videoinput"
                );
                setCameras(videoDevices);

                // Ch·ªçn camera theo index
                if (videoDevices[cameraIndex]) {
                    setSelectedCamera(videoDevices[cameraIndex]);
                } else if (videoDevices.length > 0) {
                    setSelectedCamera(videoDevices[0]);
                }
            } catch (err) {
                console.error("L·ªói khi li·ªát k√™ camera:", err);
                setError("Kh√¥ng th·ªÉ li·ªát k√™ camera");
            }
        };

        listCameras();
    }, [cameraIndex]);

    // Kh·ªüi ƒë·ªông camera
    useEffect(() => {
        if (!selectedCamera) return;

        const startCamera = async () => {
            try {
                setError("");
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: {
                        deviceId: { exact: selectedCamera.deviceId },
                    },
                });

                if (videoRef.current) {
                    videoRef.current.srcObject = stream;
                }
            } catch (err) {
                console.error("L·ªói khi truy c·∫≠p camera:", err);
                setError(
                    `Kh√¥ng th·ªÉ truy c·∫≠p camera: ${
                        selectedCamera.label || `Camera ${cameraIndex}`
                    }`
                );
            }
        };

        startCamera();
    }, [selectedCamera, cameraIndex]);

    const handleCameraChange = (deviceId) => {
        const camera = cameras.find((cam) => cam.deviceId === deviceId);
        setSelectedCamera(camera);
    };

    const captureImage = () => {
        if (videoRef.current && canvasRef.current) {
            const canvas = canvasRef.current;
            const context = canvas.getContext("2d");
            canvas.width = videoRef.current.videoWidth;
            canvas.height = videoRef.current.videoHeight;
            context.drawImage(videoRef.current, 0, 0);

            // Chuy·ªÉn ·∫£nh th√†nh base64 v√† g·ª≠i l√™n backend
            const imageData = canvas.toDataURL("image/jpeg");
            sendToBackend(imageData);
        }
    };

    // H√†m t·ª± ƒë·ªông ch·ª•p ·∫£nh khi nh·∫≠n signal WebSocket
    const autoCaptureFromWS = async (uid, cameraIndex) => {
        if (videoRef.current && canvasRef.current) {
            const canvas = canvasRef.current;
            const context = canvas.getContext("2d");
            canvas.width = videoRef.current.videoWidth;
            canvas.height = videoRef.current.videoHeight;
            context.drawImage(videoRef.current, 0, 0);
            const imageData = canvas.toDataURL("image/jpeg");
            setIsLoading(true);
            try {
                // G·ª≠i ·∫£nh + UID l√™n backend
                const response = await fetch(
                    "http://localhost:8080/api/esp32/auto-capture",
                    {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            uid,
                            cameraIndex,
                            imageData,
                        }),
                    }
                );
                const result = await response.json();

                // X·ª≠ l√Ω c√°c lo·∫°i response kh√°c nhau
                if (result.action === "OUT_SECURITY_ALERT") {
                    // C·∫£nh b√°o b·∫£o m·∫≠t - bi·ªÉn s·ªë kh√¥ng kh·ªõp
                    setLicensePlate(
                        `üö® C·∫¢NH B√ÅO: Bi·ªÉn s·ªë kh√¥ng kh·ªõp!\n` +
                            `V√†o: ${result.entryPlate}\n` +
                            `Ra: ${result.exitPlate}\n` +
                            `ƒê·ªô gi·ªëng: ${result.similarity}`
                    );
                } else if (result.action === "OUT") {
                    // Xe ra th√†nh c√¥ng - hi·ªÉn th·ªã th√¥ng tin t√≠nh ti·ªÅn
                    setLicensePlate(
                        `‚úÖ Xe ra th√†nh c√¥ng!\n` +
                            `Bi·ªÉn s·ªë: ${result.exitPlate}\n` +
                            `Th·ªùi gian ƒë·ªó: ${result.parkingDuration}\n` +
                            `T√≠nh ph√≠ theo: ${result.billingHours}\n` +
                            `Ph√≠: ${result.fee}`
                    );
                } else if (result.action === "OUT_ERROR") {
                    // Kh√¥ng t√¨m th·∫•y record v√†o
                    setLicensePlate(
                        `‚ùå L·ªói: ${result.error}\n` +
                            `Bi·ªÉn s·ªë: ${
                                result.licensePlate || "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c"
                            }`
                    );
                } else {
                    // Xe v√†o ho·∫∑c tr∆∞·ªùng h·ª£p kh√°c
                    setLicensePlate(
                        result.licensePlate ||
                            result.exitPlate ||
                            "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c"
                    );
                }

                // G·ªçi callback ƒë·ªÉ c·∫≠p nh·∫≠t App.jsx n·∫øu c√≥
                if (onPlateDetected) {
                    // Ch·ªâ g·ª≠i object cho camera RA (cameraIndex = 2), camera V√ÄO v·∫´n g·ª≠i string
                    if (cameraIndex === 2) {
                        // Camera RA - g·ª≠i object ƒë·ªÉ t√°ch th√¥ng tin
                        let callbackData = {};
                        if (result.action === "OUT_SECURITY_ALERT") {
                            callbackData = {
                                licensePlate: result.exitPlate,
                                status: "üö® C·∫¢NH B√ÅO: Bi·ªÉn s·ªë kh√¥ng kh·ªõp!",
                                details: `V√†o: ${result.entryPlate} | Ra: ${result.exitPlate} | ƒê·ªô gi·ªëng: ${result.similarity}`,
                                parkingDuration: null,
                                fee: null,
                            };
                        } else if (result.action === "OUT") {
                            callbackData = {
                                licensePlate: result.exitPlate,
                                status: "‚úÖ Xe ra th√†nh c√¥ng!",
                                details: `T√≠nh ph√≠ theo: ${result.billingHours}`,
                                parkingDuration: result.parkingDuration,
                                fee: result.fee,
                            };
                        } else if (result.action === "OUT_ERROR") {
                            callbackData = {
                                licensePlate:
                                    result.licensePlate ||
                                    "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c",
                                status: "‚ùå L·ªói: " + result.error,
                                details: null,
                                parkingDuration: null,
                                fee: null,
                            };
                        } else {
                            callbackData = {
                                licensePlate:
                                    result.licensePlate ||
                                    result.exitPlate ||
                                    "",
                                status: null,
                                details: null,
                                parkingDuration: null,
                                fee: null,
                            };
                        }
                        onPlateDetected(callbackData);
                    } else {
                        // Camera V√ÄO - g·ª≠i string nh∆∞ c≈©
                        onPlateDetected(
                            result.licensePlate || result.exitPlate || ""
                        );
                    }
                }
            } catch {
                setLicensePlate("L·ªói g·ª≠i t·ª± ƒë·ªông!");
            } finally {
                setIsLoading(false);
            }
        }
    };

    useImperativeHandle(ref, () => ({
        autoCaptureFromWS,
    }));

    const sendToBackend = async (imageData) => {
        setIsLoading(true);
        try {
            // Ch·ªâ g·ª≠i ·∫£nh ƒë·ªÉ nh·∫≠n di·ªán, kh√¥ng l∆∞u DB
            const response = await fetch("http://localhost:8080/api/parking", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ image: imageData }),
            });
            const result = await response.json();
            const detectedPlate = result.licensePlate || "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c";
            setLicensePlate(detectedPlate);
            // Truy·ªÅn bi·ªÉn s·ªë l√™n component cha
            if (onPlateDetected) {
                onPlateDetected(detectedPlate);
            }
        } catch (err) {
            console.error("L·ªói khi g·ª≠i ·∫£nh:", err);
            setLicensePlate("L·ªói k·∫øt n·ªëi");
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div
            style={{ border: "1px solid #ccc", padding: 12, marginBottom: 16 }}
        >
            <h3 style={{ textAlign: "center" }}>{title}</h3>

            {/* Dropdown ch·ªçn camera */}
            {cameras.length > 1 && (
                <select
                    value={selectedCamera?.deviceId || ""}
                    onChange={(e) => handleCameraChange(e.target.value)}
                    style={{
                        width: "100%",
                        marginBottom: 8,
                        padding: 4,
                        border: "1px solid #ccc",
                        borderRadius: 4,
                    }}
                >
                    {cameras.map((camera, index) => (
                        <option key={camera.deviceId} value={camera.deviceId}>
                            {camera.label || `Camera ${index}`}
                        </option>
                    ))}
                </select>
            )}

            {/* Hi·ªÉn th·ªã l·ªói */}
            {error && (
                <div
                    style={{
                        color: "red",
                        fontSize: 12,
                        marginBottom: 8,
                        textAlign: "center",
                        background: "#ffe6e6",
                        padding: 4,
                        borderRadius: 4,
                    }}
                >
                    {error}
                </div>
            )}

            <video
                ref={videoRef}
                autoPlay
                playsInline
                style={{ width: "100%", height: 180, background: "#000" }}
            />
            <canvas ref={canvasRef} style={{ display: "none" }} />
            <button
                onClick={captureImage}
                disabled={isLoading || !!error}
                style={{
                    width: "100%",
                    marginTop: 8,
                    padding: 8,
                    background: isLoading || error ? "#ccc" : "#007bff",
                    color: "white",
                    border: "none",
                    borderRadius: 4,
                    cursor: isLoading || error ? "not-allowed" : "pointer",
                }}
            >
                {isLoading ? "ƒêang x·ª≠ l√Ω..." : "Ch·ª•p ·∫£nh"}
            </button>
            <div
                style={{
                    minHeight: 60,
                    border: "1px solid #aaa",
                    background: "#fff",
                    textAlign: "center",
                    padding: "8px",
                    fontSize: "14px",
                    whiteSpace: "pre-line", // Cho ph√©p xu·ªëng d√≤ng v·ªõi \n
                    lineHeight: "1.4",
                }}
            >
                <span style={{ color: "#333" }}>{licensePlate}</span>
            </div>
        </div>
    );
});

export default CameraView;
