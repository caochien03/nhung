// Test ESP32 nh∆∞ th·ª±c t·∫ø
const mongoose = require('mongoose');
const esp32Controller = require('./controllers/esp32Controller');

const testRealESP32Flow = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/smart-parking');
    console.log('‚úÖ Connected to database');

    console.log('\nüéØ TESTING REAL ESP32 FLOW');
    console.log('='.repeat(50));

    // Simulate th·ª±c t·∫ø: ESP32 g·ª≠i RFID + OCR result
    const mockResponse = (label) => ({
      json: (data) => {
        console.log(`\nüìã ${label}:`);
        console.log(`üéØ Action: ${data.action}`);
        console.log(`üìù Message: ${data.message}`);
        console.log(`üöó License: ${data.licensePlate || data.entryPlate || data.exitPlate || 'N/A'}`);
        console.log(`üí≥ Payment: ${data.paymentType || 'N/A'}`);
        console.log(`üé´ Subscription: ${data.subscriptionUsed ? '‚úÖ USED' : '‚ùå NO'}`);
        console.log(`üö™ Gate: ${data.shouldOpenGate ? 'üü¢ OPEN' : 'üî¥ CLOSED'}`);
        if (data.fee !== undefined) {
          console.log(`üí∞ Fee: ${data.fee}`);
        }
        if (data.subscriptionInfo) {
          console.log(`üé´ ${data.subscriptionInfo}`);
        }
        if (data.parkingDuration) {
          console.log(`‚è±Ô∏è  Duration: ${data.parkingDuration}`);
        }
        console.log('‚îÄ'.repeat(40));
      }
    });

    // Test 1: Xe v√†o c√≥ v√© th√°ng
    console.log('\nüöó‚û°Ô∏è TEST: XE V√ÄO C√ì V√â TH√ÅNG');
    await esp32Controller.autoCapture({
      body: {
        uid: "D3477DF5",
        cameraIndex: 1,
        licensePlate: "63-B1*842.40", // OCR reading
        imageData: null
      }
    }, mockResponse('VEHICLE ENTRY'));

    await new Promise(resolve => setTimeout(resolve, 1000));

    // Test 2: Xe ra c√≥ v√© th√°ng  
    console.log('\nüöó‚¨ÖÔ∏è TEST: XE RA C√ì V√â TH√ÅNG');
    await esp32Controller.autoCapture({
      body: {
        uid: "D3477DF5",
        cameraIndex: 2,
        licensePlate: "63-B1*842.40", // OCR reading
        imageData: null
      }
    }, mockResponse('VEHICLE EXIT'));

    await new Promise(resolve => setTimeout(resolve, 1000));

    // Test 3: Xe v√†o KH√îNG c√≥ v√© th√°ng
    console.log('\nüöó‚û°Ô∏è TEST: XE V√ÄO KH√îNG C√ì V√â TH√ÅNG');
    await esp32Controller.autoCapture({
      body: {
        uid: "B2EBC905",
        cameraIndex: 1,
        licensePlate: "51-F1 999.99", // Bi·ªÉn s·ªë m·ªõi
        imageData: null
      }
    }, mockResponse('HOURLY VEHICLE ENTRY'));

    await new Promise(resolve => setTimeout(resolve, 2000)); // ƒê·ªó 2 gi√¢y

    // Test 4: Xe ra v√© l∆∞·ª£t
    console.log('\nüöó‚¨ÖÔ∏è TEST: XE RA V√â L∆Ø·ª¢T');
    await esp32Controller.autoCapture({
      body: {
        uid: "B2EBC905",
        cameraIndex: 2,
        licensePlate: "51-F1 999.99", // C√πng bi·ªÉn s·ªë
        imageData: null
      }
    }, mockResponse('HOURLY VEHICLE EXIT'));

    console.log('\n‚úÖ REAL ESP32 FLOW TEST COMPLETED');

  } catch (error) {
    console.error('‚ùå Test error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüì¥ Disconnected from database');
  }
};

testRealESP32Flow();
